
--------------------------------- 2021 05 01

----------- 관리자가 공개 설정한것만 사용자가 볼수있게 하기

---------------------------- 관리자 페이지 list.jsp

<c:set var="open" value = ""/>
<c:if test="${n.pub}">
		<c:set var="open" value = "checked"/>
</c:if>

<td><input type="checkbox" name="open-id" ${open} value="${n.id}"></td>


List<NoticeView> list = service.getNoticePubList(field , query, page);


public List<NoticeView> getNoticePubList(String field, String query, int page) {
		
		List<NoticeView> list = new ArrayList<>();
		String sql = "SELECT * FROM ( "
				+ "    SELECT ROWNUM NUM, N.* "
				+ "    FROM (SELECT * FROM NOTICE_VIEW3 WHERE "+field+" LIKE ? ORDER BY REGDATE DESC) N "
				+ ") "
				+ "WHERE PUB=1 AND NUM BETWEEN ? AND ? ";

		// pub 이 1이면 공개하는거여서 데이터베이스에서 쿼리문을 PUB = 1 일때
		// 조건을 더 붙여줘서 데이터를 가져온다.
		
		// 1, 11, 21 , 31 -> 등차수열  an = a1+(n-1)*d
		//							an = 1 + (page-1)*10
		// 10 , 20, 30, 40 -> page*10
		
		String url = "jdbc:oracle:thin:@localhost:1521/xepdb1";		
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection con = DriverManager.getConnection(url,"NEWLEC","0297");
			PreparedStatement st = con.prepareStatement(sql);
			st.setString(1, "%"+query+"%");
			st.setInt(2, 1+(page-1)*10);
			st.setInt(3, page*10);
			
			
			ResultSet rs = st.executeQuery();

			while(rs.next()){ 
				int id = rs.getInt("id");
				String title = rs.getString("TITLE"); 
				Date regdate = rs.getDate("REGDATE"); 
				String writerId = rs.getString("WRITER_ID"); 
				String hit = rs.getString("HIT"); 
				String files = rs.getString("FILES"); 
				// String content = rs.getString("CONTENT"); 
				int cmtCount = rs.getInt("CMT_COUNT");
				boolean pub = rs.getBoolean("PUB");
				
				NoticeView notice = new NoticeView(id, title, regdate, writerId, hit, pub, files,  /*content,*/ cmtCount);
				
				list.add(notice);
			} 

			rs.close();
			st.close();
			con.close();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return list;
	}

	public int pubNoticeAll(String oidsCSV , String cidsCSV){
		// CSV 콤마로 구분된 값
		int result = 0;
		String sqlOpen = String.format("UPDATE NOTICE SET PUB=1 WHERE ID IN(%s)" ,oidsCSV);
		String sqlClose = String.format("UPDATE NOTICE SET PUB=0 WHERE ID IN(%s)", cidsCSV);
		
		String url = "jdbc:oracle:thin:@localhost:1521/xepdb1";		
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection con = DriverManager.getConnection(url,"NEWLEC","0297");
			Statement stOpen = con.createStatement();
			result += stOpen.executeUpdate(sqlOpen);
			
			Statement stClose = con.createStatement();
			result += stClose.executeUpdate(sqlClose);
			
			stOpen.close();
			stClose.close();
			con.close();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
	}

public int pubNoticeAll(int[] oids , int[] cids){
		
		List<String> oidsList = new ArrayList<>();
		for(int i = 0; i < oids.length; i++)
			oidsList.add(String.valueOf(oids[i]));
		
		List<String> cidsList = new ArrayList<>();
		for(int i = 0; i < cids.length; i++)
			oidsList.add(String.valueOf(cids[i]));
		
		
		
//		List<String> oidsList = Arrays.asList(oids);
//		String oidsCSV = String.join("," , "a" ,"adf" ,"ccc");
//		// -> "a,adf,ccc" 이렇게 합쳐준다.

		return pubNoticeAll(oidsList, cidsList);
	}
	
	public int pubNoticeAll(List<String> oids , List<String> cids){
		
		
		String oidsCSV = String.join("," , oids);
		String cidsCSV = String.join("," , cids);
		
		return pubNoticeAll(oidsCSV, cidsCSV);
	}

@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		String[] openIds = request.getParameterValues("open-id"); // 3 5 8
		String[] delIds = request.getParameterValues("del-id");
		String cmd = request.getParameter("cmd");
		String ids_ = request.getParameter("ids");
		String[] ids = ids_.trim().split(" "); // 1, 2, 3, 4, 5, 6, 7 ,8 ,9 ,10
		
		NoticeService service = new NoticeService();
		
		switch(cmd) {
		case "일괄공개":
			for(String openId : openIds)
				System.out.println("open id : " + openId);
			
			List<String> oids = Arrays.asList(openIds);
			// 배열을 리스트로 바꿔주는 함수 Arrays.asList
			// 1, 2, 3, 4, 5, 6, 7, 8 , 9 ,10 - // 3, 5, 8
			// 1, 2, 4 , 6, 7 ,9 ,10
			
			List<String> cids = new ArrayList(Arrays.asList(ids));
			cids.removeAll(oids);
			System.out.println(Arrays.asList(ids));
			System.out.println(oids);	
			System.out.println(cids);
			
			service.pubNoticeAll(oids , cids); // UPDATE NOTICE SET PUB = 1 WHERE ID IN (...);
			// 오픈해야할 아이디를 넘기고 오픈할목록만 따로 넘기기
			// service.closeNtoicelist(clsIds); // 
			// 오픈하지 말아야할 아이디를 넘겨서 오픈안할목록만 따로 넘기기
			break;
		case "일괄삭제":	
			
			int[] ids1 = new int[delIds.length];
			for(int i = 0 ;  i < ids1.length; i++)
				ids1[i] = Integer.parseInt(delIds[i]);
			int result = service.deleteNoticeAll(ids1);
			break;
		}
		
		response.sendRedirect("list"); // 기능 작업만하고 다시 원래 페이지로 돌아가기
		
	}	
