		공지시스템
	공지 

공지등록 -- (관리자)

공지일괄공개 -- (관리자)

공지목록조회 -- (사용자[회원])

공지상세조회 -- (사용자[회원])

공지수정 -- (관리자)

공지삭제 -- (관리자) or 공지일괄삭제

회원이쓸수있는 기능은 관리자도 다 쓸수있는 능력이다.

역할자 함수들을 구현하자 기능들을 다 함수로 하나씩 표현하자

--------- 서비스 클래스 구현하기

----- NoticeService.java
package com.newlecture.web.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.newlecture.web.entity.Notice;

public class NoticeService {
	// 기본메소드
	public List<Notice> getNoticeList(){
		
		
		return getNoticeList("title" , "" , 1); 
		// 기본 이여서 인자가 많은 오버로드 함수에서 리턴해서 나머지값을 리턴해주면 
		// 간편하게 기본메소드를 이용할수 있다.
	
	}
	// 오버로드 메소드
	public List<Notice> getNoticeList(int page){
		
		
		return getNoticeList("title" , "", page);
		// 파라미터가 적은 메소드여서 파라미터가 포함된 함수에서 다른파라미터가
		// 포함된 함수를 제호출하면 편하게 쓸수 있다.
	}
	// 오버로드 메소드
	public List<Notice> getNoticeList(String field/*TITLE, WRITER_ID*/, String query /*A*/ , int page){

		List<Notice> list = new ArrayList<>();
		// Notice 를 담은 list를 새로 선언한다. ( return 해줄 리스트를 보내주기위해 )
		String sql = "SELECT * FROM ( "
				// 아래의 조건을 만족하는 모든 정보를 뽑는다.
				+ "    SELECT ROWNUM NUM, N.* "
					// ROWNUM 을 NUM이라 별칭한 것을 뽑고 서브쿼리에서 정의된 N의 모든것을뽑는다.
				+ "    FROM (SELECT * FROM NOTICE WHERE "+field+" LIKE ? ORDER BY REGDATE DESC) N "
					// 함수 파라미터에서 field 문자열과 비슷한 애들을 NOTICE에서 뽑고 
					// ( ? 에서 무슨 형식의 데이터를 받을지 밑에서 DB데이터를 받는 것을
					// query 로 받는다.
					// 등록날짜를 내림차순으로 정렬한것을 N 이라 별칭한다.
				+ ") "
				
				+ "WHERE NUM BETWEEN ? AND ? ";
				// 이중에서 밑에 데이터베이스에서 값을 받을 두개를 ? AND ? 로해준다.  
		// 1, 11, 21 , 31 -> 등차수열  an = a1+(n-1)*d
		//							an = 1 + (page-1)*10
		// 10 , 20, 30, 40 -> page*10
		
		String url = "jdbc:oracle:thin:@localhost:1521/xepdb1";		
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection con = DriverManager.getConnection(url,"NEWLEC","0297");
			PreparedStatement st = con.prepareStatement(sql);
			st.setString(1, "%"+query+"%"); // 쿼리문에 첫번째 ?에 넣을 것을 정의한다. 즉 
							// 함수파라미터로 받은 query 를 db쿼리문에 보내준다.
			st.setInt(2, 1+(page-1)*10); // 한페이지에 10개의 notice만 보여주기 위해 첫번숫자를 정의해준다.
			st.setInt(3, page*10);	     // 마지막 페이지에 10개를 넣기위해서 마지막숫자를 page*10으로해준다.
						     // page는 함수에서 파라미터로 받는다.			
			
			ResultSet rs = st.executeQuery();

			while(rs.next()){ 
				int id = rs.getInt("id");
				String title = rs.getString("TITLE"); 
				Date regdate = rs.getDate("REGDATE"); 
				String writerId = rs.getString("WRITER_ID"); 
				String hit = rs.getString("HIT"); 
				String files = rs.getString("FILES"); 
				String content = rs.getString("CONTENT"); 
				
				Notice notice = new Notice(id, title, regdate, writerId, hit, files, content);
				
				list.add(notice); //만약 위의 조건을 만족하는 쿼리문이있따면 모든 데이터를
						  // 다 뽑을 떄까지 list에 담는다.
			} 

			rs.close();
			st.close();
			con.close();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return list; // 모두담은 list 를 반환해준다.
	}
	
	public int getNoticeCount() {
		
		return getNoticeCount("title", "");
		// 파라미터가 많은 함수를 리턴해서 재사용을 편하게 해준다.
	}
	
	public int getNoticeCount(String field ,String query) {
		
		int count = 0;
		
		String sql = "SELECT COUNT(ID) COUNT FROM ("
					// 밑에서 뽑은 ID 갯수를 세서 COUNT라는 별칭을 해준다.
				+ "    SELECT ROWNUM NUM, N.* "
					// ROWNUM 을 NUM이라 별칭한 것과 밑에서 N에대한 모든 정보를 뽑는다.
				+ "    FROM (SELECT * FROM NOTICE WHERE "+field+" LIKE ? ORDER BY REGDATE DESC) N "
					// field 문자열과 비슷한 애들을 뽑아서 등록일자 내림차순으로 뽑고 
					// 이들을 N이라별칭한다.
				+ ") ";
		
		String url = "jdbc:oracle:thin:@localhost:1521/xepdb1";		
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection con = DriverManager.getConnection(url,"NEWLEC","0297");
			PreparedStatement st = con.prepareStatement(sql);
			st.setString(1, "%"+query+"%"); // 쿼리문에 들어갈 문자를 함수 query 로받는다.
						
			ResultSet rs = st.executeQuery();
			
			if(rs.next())
				count = rs.getInt("count");
					// 만약 위에서 디비로 뽑은 데이터가 존재한다면 그 값을 count 에 넣어라.
					// "count" 에서는 쿼리문으로 뽑은 이름이 COUNT 라서 문자열로 같게해주었고
					// 소문자 대문자를구분하지 않아서 소대문자를 다르게 써도 인정해준다.
			rs.close();
			st.close();
			con.close();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return count;
	}
	
	public Notice getNotice(int id) {
		Notice notice = null;
		
		String sql = "SELECT * FROM NOTICE WHERE ID=?";
				// ID가 함수의 인자로받은 것을 ? 넣어준다.
				// ID 가 몇인 애들의 정보를 모두 뽑는다.
		String url = "jdbc:oracle:thin:@localhost:1521/xepdb1";		
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection con = DriverManager.getConnection(url,"NEWLEC","0297");
			PreparedStatement st = con.prepareStatement(sql);
			st.setInt(1, id);
			// 쿼리문에 ? 에 값을 넣어준다.			
	
			ResultSet rs = st.executeQuery();

			if(rs.next()){ 
				int nid = rs.getInt("id");
				String title = rs.getString("TITLE"); 
				Date regdate = rs.getDate("REGDATE"); 
				String writerId = rs.getString("WRITER_ID"); 
				String hit = rs.getString("HIT"); 
				String files = rs.getString("FILES"); 
				String content = rs.getString("CONTENT"); 
				
				notice = new Notice(nid, title, regdate, writerId, hit, files, content);
			} 

			rs.close();
			st.close();
			con.close();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		return notice;
	}
	
	public Notice getNextNotice(int id) { 
		Notice notice = null;
		// 일단 반환해줄 notice를 null로잡는다. ( 함수내 전역변수로 선언 )
		
		String sql = "SELECT * FROM NOTICE "
				//아래를 만족한는 정보를 모두뽑는데 서브쿼리를 쳐서 ID만 나올것이다.
				+ "WHERE ID = ( "
					// 아래를 만족하는 ID 를 뽑는다
				+ "        SELECT ID FROM NOTICE "
				+ "        WHERE REGDATE > (SELECT REGDATE FROM NOTICE WHERE ID =?) "
						// id = ? 인애들의 등록날자를 모두 뽑는다 
						// 그리고 그냥 notice에서 뽑은 regdate가 위에 애들보다 큰애들을 다시뽑는다
						// 그에대한 id 를 모두 출력한다.
				+ "        AND ROWNUM = 1 "
						// 그리고 오름차순으로 정렬되잇을테니 다음것을 뽑기위해
						// RWONUM이 1인것만 뽑는다.
				+ ")";
		
	String url = "jdbc:oracle:thin:@localhost:1521/xepdb1";		
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection con = DriverManager.getConnection(url,"NEWLEC","0297");
			PreparedStatement st = con.prepareStatement(sql);
			st.setInt(1, id);
				// 함수파라미터에서 id 값을 받아 쿼리문 첫번재 ? 에 넣는다.
			
			ResultSet rs = st.executeQuery();

			if(rs.next()){  // 쿼리문에 만족하는 아이가 있으면 notice에 담는다.
				int nid = rs.getInt("id");
				String title = rs.getString("TITLE"); 
				Date regdate = rs.getDate("REGDATE"); 
				String writerId = rs.getString("WRITER_ID"); 
				String hit = rs.getString("HIT"); 
				String files = rs.getString("FILES"); 
				String content = rs.getString("CONTENT"); 
				
				notice = new Notice(nid, title, regdate, writerId, hit, files, content);
			} 
				

			rs.close();
			st.close();
			con.close();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return notice; // 조건에 만족하는 notice를 반환한다.
	}
	
	public Notice getPrevNotice(int id) {
		Notice notice = null;
		
		String sql = "SELECT * FROM NOTICE "
					// 이에만족한느 모든데이터를 뽑는데 밑에서 ID만뽑아서 ID만나온다.
				+ "WHERE ID = ( "
					// 아래를 만족하는 아이디를 뽑는다.
				+ "    SELECT ID FROM (SELECT * FROM NOTICE ORDER BY REGDATE DESC) "
						// NOTICE테이블에서 REGDATE를 내림차순으로 해서 ID 값을 뽑는다.
				+ "        WHERE REGDATE < (SELECT REGDATE FROM NOTICE WHERE ID = ?) "
						// notice에서 id = ? 인애의 등록일자를 뽑는다.
						// ID = ? 에서 뽑은 REGDATE보다 NOTICE에서 뽑은 REGDATE가 
						// 더 작은애들을 뽑는다.
				+ "        AND ROWNUM = 1 "
						// 이중 ROWNUM 이 1인아이를 뽑는다.
				+ "        )";
		
	String url = "jdbc:oracle:thin:@localhost:1521/xepdb1";		
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection con = DriverManager.getConnection(url,"NEWLEC","0297");
			PreparedStatement st = con.prepareStatement(sql);
			st.setInt(1, id);
			// 함수 파라미터에서 받은 id값을 쿼리문 첫번째 ? 에 넣어준다.
			ResultSet rs = st.executeQuery();

			if(rs.next()){ // 쿼리문에서 만족하는 아이가있으면 notice에 담아준다.
				int nid = rs.getInt("id");
				String title = rs.getString("TITLE"); 
				Date regdate = rs.getDate("REGDATE"); 
				String writerId = rs.getString("WRITER_ID"); 
				String hit = rs.getString("HIT"); 
				String files = rs.getString("FILES"); 
				String content = rs.getString("CONTENT"); 
				
				notice = new Notice(nid, title, regdate, writerId, hit, files, content);

			} 

			rs.close();
			st.close();
			con.close();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return notice; // notice를 반환해준다.
	}
}

----------------- NoticeListController

package com.newlecture.web.controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.newlecture.web.entity.Notice;
import com.newlecture.web.service.NoticeService;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/notice/list")
public class NoticeListController extends HttpServlet{
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//list?f=title&q=a
		
		
		String field_ = request.getParameter("f");
		// 웹에서 f 로 받은 아이를 field_로 넣어준다.
		String query_ = request.getParameter("q");
		// 웹에서 q 로 받은 아이를 query_로 넣어준다.
		String page_ = request.getParameter("p");
		// 웹에서 p 로 받은 아이를 page_에 넣어준다.

		String field = "title";
		if(field_ != null && !field_.equals(""))
			field = field_;
		// field 의 default 값을 title로 하고 만약 웹에서 f 로 받은 아이가 
		// null 이 아니면서 빈문자열이 아니면! 그대 field 변수에 웹에서 받은 값 field_을넣어준다.
		
		String query = "";
		if(query_ != null )
			query = query_;
		// query 의 default 값을 빈문자열로 하고 만약 웹에서 q 로 받은 아이가 
		// null 이 아니면서 빈문자열이 아니면! 그대 qeury 변수에 웹에서 받은 값 query_을넣어준다.

		
		int page = 1;
		if(page_ != null)
			page = Integer.parseInt(page_);
		// page 의 default 값을 1로 하고 만약 웹에서 p 로 받은 아이가 
		// null 이 아니면서 빈문자열이 아니면! 그대 page 변수에 웹에서 받은 값 page_을넣어준다.
		
		NoticeService service = new NoticeService(); // NoticeService 클래스를 받아서 service객체를 생성해준다.
		List<Notice> list = service.getNoticeList(field , query, page); 
		// NoticeService에있는 getNoticeList()함수에 field , query , page 인수를 넣어주고
		// Notice를 담는리스트에 넣어준다.
		int count = service.getNoticeCount(field, query);
		// 몇페이지인지 알기위해 count 값에 NoticeService에 있는 getNoticeCount에 field 와 qeury 를 넣어준다.
		request.setAttribute("list", list); 
		// jsp 에서 쓸수잇게 list를  "list"로 넘겨준다.
		request.setAttribute("count", count);
		// jsp 에서 쓸수있게 count를 "count"로 넘겨준다
		request.getRequestDispatcher("/WEB-INF/view/notice/list.jsp").forward(request, response);
		
	}
}

--------------------------- list.jsp


<fieldset>
	<legend class="hidden">공지사항 검색 필드</legend>
	<label class="hidden">검색분류</label>
	<select name="f">
		<option ${(param.f=="title")?"selected":"" } value="title">제목</option>
		// 웹으로부터 받은 f 값 즉
		// param.f 가 만약 title이면 option에 selected를 쓰고 아니면 빈문자열을써라
		// (제목이면 제목으로 쓰고 그값을 제목으로 유지하고 입력한 값도 유지해주라.
		<option ${(param.f=="writer_id")?"selected":"" } value="writer_id">작성자</option>
		// 웹으로 받은 f 값 즉 param.f 가 writer_id 이면 옵션에 selected를 쓰고 아니면 빈문자열을 써라
		// ( 작성자이면 작성자로 쓰고 그값을 작성자로 유지하고 입력한 문자열 값도 유지해줘라,
	</select>
	<label class="hidden">검색어</label>
	<input type="text" name="q" value="${param.q}"/>
	<input class="btn btn-search" type="submit" value="검색" />
</fieldset>


	</div>
<c:set var="page" value="${(empty param.p)?1:param.p}" />
<c:set var="startNum" value="${page-(page-1)%5}" />
<c:set var="lastNum" value="${fn:substringBefore(Math.ceil(count/10), '.')}"/>
	// java에서 받은 count 값을 10으로 나누고 소수점이 잇으면 그값을 올려줘라 ( 즉, 10.2 이면 11로 )
	<div class="indexer margin-top align-right">
		<h3 class="hidden">현재 페이지</h3>
		<div><span class="text-orange text-strong">${(empty param.p)?1:param.p}</span> / ${lastNum} pages</div>
		// empty 는 param.p != null && !param.p.equals("") 을 포함한 구문이다.
		// 따라서 웹으로받은 p 값이 null 도아니고 빈문자열도아니면 1 을 쓰고 
		// 만약조건이 맞다면 웹으로받은 p 값을 써라
	</div>


<c:forEach var="i" begin="0" end = "4">
<c:if test="${(startNum+i) <= lastNum}">
// 만약 startNum+i 가 lastNum 보다 작거나 같으면
<li><a class="-text- ${(page==(startNum+i))?'orange':''} bold" href="?p=${startNum+i}&f=${param.f}&q=${param.q}" >${startNum+i}</a></li>
// page 가 startNum+i 값과 같으면 오랜지색으로 표기하고 아니면 기본값을 유지해라 (검은색)  bold 는 모두 유지하고
// p 에는 startNum+i 값을 넘겨주고 , f 에는 param.f 그대로 돌려주고 , q 도 param.q 를 그대로 돌려줘라.
</c:if>
</c:forEach>



<c:if test="${startNum+4<lastNum}">
// 만약 startNum+4 값이 lastNum 값보다 작으면
	<a href="?p=${startNum+5}&t=&q=" class="btn btn-next">다음</a>
// 웹에 p값으로 startNum + 5  값을 넘겨줘라 ( 다음페이지 넘기면 5개 다시보여주기 )
</c:if>
<c:if test="${startNum+4>=lastNum}">
// 그런데 만약 startNum+4 가 lastNum 보다 크거나 같으면
<span class="btn btn-next" onclick="alert('다음 페이지가 없습니다.');">다음</span>
// 다음페지가 없어야한다.

-------------- NoticeDetailController.java

public class NoticeDetailController extends HttpServlet{
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		int id = Integer.parseInt(request.getParameter("id"));

		NoticeService service = new NoticeService(); // NoticeService 클래스에서 service객체를 생성한다.
		Notice notice = service.getNotice(id); // NoticeService에 잇는 getNotice함수에 id 값을 넘겨준다.
						      // 함수를걸쳐 반환된 notice 가져간다.
		request.setAttribute("n", notice);	// detail.jsp 에서 쓸수있게 request.setAttribute를 해준다.
		
		request.getRequestDispatcher("/WEB-INF/view/notice/detail.jsp").forward(request, response);
						// forward 하게되면 detail.jsp 와같이 쓰게되는거다.
		
	}
}

// 일일이 값들ㅇ을 다받아서 list에 넣엇던것을 간결하게 NoticeService에있는 함수를 써서 간편하게 만드는 작업.
